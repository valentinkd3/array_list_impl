package ru.kozhevnikov;

import java.util.Comparator;
import java.util.function.Predicate;

/**
 * Упорядоченный список. Пользователь этого интерфейса может контролировать куда в списке вставляется каждый элемент.
 * Пользователь может получать доступ к элементам по их целочисленному индексу (положению в списке), выполнять поиск элементов в списке,
 * удалять и сортировать элементы в списке.
 *
 * @param <E> тип элементов в списке
 *
 * @author Kozhevnikov Valentin
 * @see  CustomArrayList
 */
public interface CustomList<E> extends Iterable<E> {
    /**
     * Добавляет передаваемый элемент в конец списка.
     *
     * @param element элемент, добавляемый в список
     */
    void add(E element);

    /**
     * Добавляет передаваемый элемент в указанное место списка по индексу.
     * Сдвигает все элементы, следующие за указанным, на одну позицию вправо.
     *
     * @param index индекс, по которому элемент будет добавлен в список
     * @param element элемент, добавляемый в список
     * @throws IndexOutOfBoundsException если индекс отрицательный или не меньше
     * размера списка
     */
    void add(int index, E element);

    /**
     * Возвращает элемент из списка по его индексу.
     *
     * @param index индекс возвращаемоего элемента
     * @return искомый элемент списка
     * @throws IndexOutOfBoundsException если индекс отрицательный или не меньше
     * размера списка
     */
    E get(int index);

    /**
     * Возвращает индекс певрго элемента списка, соответсвующего переданному элементу,
     * или -1 в случае его отсутствия.
     *
     * @param element элемент списка, индекс которого мы хотим получить
     * @return индекс элемента списка
     */
    int indexOf(E element);

    /**
     * Удаляет элемент из списка по его индексу.Сдвигает все элементы,
     * следующие за удаляемым, на одну позицию влево.
     *
     * @param index индекс удаляемого элемента
     * @throws IndexOutOfBoundsException если индекс отрицательный или не меньше
     * размера списка
     */
    void remove(int index);

    /**
     * Удаляет перый элемент из списка, соответсвующий переданному элементу, в случае
     * его наличия. В случае отсутствия такого элемента список не изменяется.
     *
     * @param element жлемент, который необходимо удалить из списка
     * @return {@code true} если список содержит указанный элемент
     */
    boolean remove(E element);

    /**
     * Удаляет элементы из списка, удовлетворяющие передаваемому условию. В случае
     * отсуствия таких элементов список не изменяется.
     *
     * @param filter условие, в соответствии с которым элементы удаляются из списка
     * @throws NullPointerException если передаваемое условие равно {@code null}
     */
    void removeIf(Predicate<? super E> filter);

    /**
     * Удаляет все элементы из списка.
     */
    void clear();

    /**
     * Возвращает размер списка.
     *
     * @return размер списка
     */
    int size();

    /**
     * Сортирует список с помощью алгоритма быстрой сортировки в соответствии с методом
     * {@code compare} компаратора - объекта класса, реализующего функциональный
     * интерфейс {@code Comparator}.
     *
     * <p> При реализации алгоритма быстрой сортировки в качестве опорного элемента на каждом
     * шаге выбирается случайный элемент, что уменьшает вероятность возникнования ниахудшего
     * случая при сортировке, когда список уже отсортирован или почти отсортирован.
     *
     * @param comparator объекта класса, реализующего функциональный интерфейс {@code Comparator}
     */
    void sort(Comparator<? super E> comparator);

    /**
     * Возвращает новый список, включающий в себя элементы списка, на котором вызывает данный метод,
     * расположенные от {@code begin} включительно до {@code end}.
     *
     * @param begin начальный индекс
     * @param end конечный индекс
     * @throws IndexOutOfBoundsException если индексы отрицательные или больше
     * размера списка
     * @throws IllegalArgumentException если начальный индекс больше конечного
     */
    CustomList<E> subList(int begin, int end);

    /**
     * Производит замену элемента списка с передаваемым индексом на передаваемый элемент.
     *
     * @param index индекс заменяемого элемента
     * @param element элемент, на который будет произведена замена
     * @throws IndexOutOfBoundsException если индекс отрицательный или не меньше размера списка
     */
    void set(int index, E element);
}
